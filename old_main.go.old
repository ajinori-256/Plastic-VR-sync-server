package main 

import (
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"fmt"
	"github.com/golang/protobuf/proto"
	syncpb "github.com/ajinori-256/Plastic-VR-sync-server/syncpb"
	"golang.org/x/net/websocket"
	"github.com/google/uuid"
)
var sessions = make(map[string]session)
type player struct{
	client chan syncpb.ClientSync
	session chan syncpb.SessionSync
	pos [4] syncpb.Transform
}
type session struct{
	worldUrl string
	channel chan player

}
func main() {
	// Echo instance
	e := echo.New()

	// Middleware
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	// Routes
	e.GET("/session/:id", sessionHandle)

	// Start server
	e.Logger.Fatal(e.Start(":1323"))
}

func sessionHandle(c echo.Context) error {
	websocket.Handler(func(ws *websocket.Conn) {
		defer ws.Close()

		err := websocket.Message.Send(ws, "server:Hello, Client!")

		if err != nil {
			c.Logger().Error(err)
		}
		for {
			msg := ""
			err = websocket.Message.Receive(ws, &msg)
			if err != nil {
				c.Logger().Error(err)
			}

			err := websocket.Message.Send(ws, fmt.Sprintf("Session[%s]: \"%s\" received!", c.Param("id"), msg))
			if err != nil {
				c.Logger().Error(err)
			}
		}
	}).ServeHTTP(c.Response(), c.Request())
	return nil
}

func sessionCreate(c echo.Context) error {
	id := uuid.New().String()
	sessions[id].channel = make(chan player)
	go func(id string){
		var players [] player
		var members_sync json 
		for{
			for len(sessions[id].channel)==0 {
			players.append(<- sessions[id].channel ) 
			}
			for i:=0;i<len(players);i++{				
				data :=<- players[i].client 
				for j:=0;j<len(data.Tracker);j++{
					players[data.Tracker[j].Id].pos = players[data.Tracker[j].Id].Transform
				}
			}
			
		}
	}(id)
	return nil
	}
